class Solution{
  public:
int lowerBound(vector<int> arr, int n, int x) {
    int low = 0, high = n - 1;
    int ans = n;
    while(low <= high) {
        int mid = (low + high) / 2;
        // maybe an answer
        if(arr[mid] >= x) {
            ans = mid;
            // look for more small index on left
            high = mid - 1;
        }
        else {
            low = mid + 1; // look for right
        }
    }
    return ans;
}

int rowWithMax1s(vector<vector<int>> &matrix) {
  int m= matrix[0].size();
  int n = matrix.size();
    int cnt_max = 0;
    int index = -1;
    for(int i = 0; i<n; i++) {
        int cnt_ones = m - lowerBound(matrix[i], m, 1);
        if(cnt_ones > cnt_max) {
            cnt_max = cnt_ones;
            index = i;
        }
    }
    return index;
}
};
