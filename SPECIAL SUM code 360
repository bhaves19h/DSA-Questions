You are given an array ‘ARR’ of length ‘N’. There are two operations, ‘FIRST_SUM’ and ‘LAST_SUM’ for every index ‘i’ (1 <= i <= N) in the array,

i) FIRST_SUM(i) calculates the sum of first i numbers.

ii) LAST_SUM(i) calculates the sum of last N-i+1 numbers.

Also for every ‘i’, SPECIAL_SUM(i) can be calculated as:

SPECIAL_SUM(i) = FIRST_SUM(i) + LAST_SUM(i)

Your task is to return the minimum SPECIAL_SUM for 0 <= i <= N - 1.

For example:

Given ‘N’ = 4 and ‘ARR’ = [1, 2, 3, 4].
Then the minimum special sum will be 5 for i = 0 (0-based indexing), which is (1 + 4) = 5.Sum of 1 integer from beginning and end.
For i = 1 it will be (1 + 2) + (3 + 4) = 10
For i = 2 it will be (1 + 2 + 3) + (2 + 3 + 4) = 15
For i = 3 it will be (1 + 2 + 3 + 4) + (1 + 2 + 3 + 4) = 20
All of which are greater than 5.  
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
2
4
1 2 3 4
4
1 -2 -3 4
Sample Output 1:
5
-5
Explanation of the Sample Input 1:
For the first test case:
The  minimum special sum will be 5 for i = 0 (0-based indexing), which is (1 + 4) = 5.
For i = 1 it will be (1 + 2) + (3 + 4) = 10
For i = 2 it will be (1 + 2 + 3) + (2 + 3 + 4) = 15
For i = 3 it will be (1 + 2 + 3 + 4) + (1 + 2 + 3 + 4) = 20
All of which are greater than 5.  

For the second test case:
The  minimum special sum will be -5 for i = 2 (0-based indexing), which is (1 + (-2) + (-3)) +  (-2 + (-3) + (4)) = -5.
For i = 0 it will be (1) + (4) = 5
For i = 1 it will be (1 + (-2) ) + ( (-3) + 4) = 0 
For i = 3 it will be (1 + (-2) + (-3) + 4)  + (1 + (-2) + (-3) + 4) = 0.
All of which are less than -5.
Sample Input 2:
2
5
1 2 -5 3 1
5 
1 1 1 1 1
Sample Output 2:
-3
2
/*------------------------------------------------------------------------------------------------CODE---------------------------------------------------------------------*/
#include <bits/stdc++.h> 
int specialSum(vector<int> &arr,int n)
{
	// Write your code here. 
	//int n = arr.size();
 int fSum =0 ,lSum=0;
 int total =accumulate(arr.begin() , arr.end(),0);
int minSum = INT_MAX;

     for (int i = 0; i < n; ++i) {
       fSum += arr[i];
        lSum += arr[n-i-1];
       int sSum = fSum + lSum;

       minSum = min(minSum,sSum);
     }

     return minSum;
     
}
