#include <bits/stdc++.h>
using namespace std;
/*int f(int ind , int w , vector<int> &wt , vector<int>&value,vector<vector<int>&dp){
	if(ind == 0 ){
		if(wt[0] <= 0) return value[0];
		return 0;
	}
	int nottake = 0+ f(ind-1 ,w ,wt ,value,dp);
	int take = INT_MIN;
	if(wt[ind] <= w){
		take = value[ind]+f(ind-1 , w-wt[ind],wt,value,dp);
	}
	return dp[ind][w] = max(take ,nottake);

}*/
int knapsack(vector<int> &weight, vector<int> &value, int n, int maxWeight) 
{
    vector<vector<int>> dp(n, vector<int>(maxWeight + 1, 0));

    // Base case: Filling first row
    for (int W = weight[0]; W <= maxWeight; W++) {
        dp[0][W] = value[0]; 
    }

    for (int ind = 1; ind < n; ind++) {
        for (int W = 0; W <= maxWeight; W++) {
            int notTake = dp[ind - 1][W];
            int take = INT_MIN;
            if (weight[ind] <= W) {
                take = value[ind] + dp[ind - 1][W - weight[ind]];
            }
            dp[ind][W] = max(take, notTake);
        }
    }

    return dp[n - 1][maxWeight];
}


