class Solution {
public:
    int countWays(string &digits) {
        int n = digits.size();
        if (n == 0 || digits[0] == '0') return 0;

        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        dp[1] = (digits[0] != '0') ? 1 : 0;

        for (int i = 2; i <= n; i++) {
            int oneDigit = digits[i - 1] - '0';  // Convert char to int
            int twoDigit = (digits[i - 2] - '0') * 10 + (digits[i - 1] - '0');

            if (oneDigit >= 1)
                dp[i] += dp[i - 1];

            if (twoDigit >= 10 && twoDigit <= 26)
                dp[i] += dp[i - 2];
        }
        return dp[n];
    }
};
