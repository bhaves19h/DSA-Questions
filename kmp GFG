  public:
  vector<int> buildLPS(string pat) {
    int m = pat.size();
    vector<int> lps(m, 0); // Initialize LPS array
    int len = 0;           // Length of the previous longest prefix suffix
    int i = 1;

    while (i < m) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

    vector<int> search(string& pat, string& txt) {
        // code here
           vector<int> result; // To store the starting indices of matches
    int n = txt.size();
    int m = pat.size();

    if (m == 0 || n == 0 || m > n) return result;

    // Build the LPS array
    vector<int> lps = buildLPS(pat);

    int i = 0; // Index for txt
    int j = 0; // Index for pat

    while (i < n) {
        if (txt[i] == pat[j]) {
            i++;
            j++;
        }

        if (j == m) { // Found a match
            result.push_back(i - j);
            j = lps[j - 1];
        } else if (i < n && txt[i] != pat[j]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
    return result;

    }
