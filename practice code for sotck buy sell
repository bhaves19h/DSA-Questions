int maximumProfit(vector<int>& price) {
    int n = price.size();
    if (n < 2) return 0; // No profit if there are less than two prices

    int pro = 0;
    int count = 0;
    int buy = price[0];
    int cnt = 0;

    // Find the first transaction
    for (int i = 1; i < n; i++) {
        if (price[i] > price[count]) {
            count = i; // Update the index of the max price so far
        } else {
            break; // Stop if we encounter a smaller price
        }
    }

    // Calculate the profit for the first transaction
    int sell = price[count] - buy;

    // Find the second transaction starting from `count + 1`
    int sel = price[count];
    for (int j = count + 1; j < n; j++) {
        if (price[j] > sel) {
            cnt = j; // Update the index of the max price so far in the second transaction
        }
    }

    // Calculate the profit for the second transaction
    int sell1 = (cnt > count) ? price[cnt] - price[count + 1] : 0;

    // Total profit from both transactions
    pro = sell + sell1;

    return pro;
}
