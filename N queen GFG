class Solution {
private:
    vector<vector<int>> result; // Stores all valid solutions

    // Function to check if a queen can be placed at board[row][col]
    bool isSafe(vector<int>& board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (board[i] == col || abs(board[i] - col) == abs(i - row)) {
                return false;
            }
        }
        return true;
    }

    // Backtracking function to place queens
    void solveNQueen(vector<int>& board, int row, int n) {
        if (row == n) {  // If all queens are placed, store the solution
            vector<int> solution(board);
            for (int& pos : solution) pos += 1; // Convert to 1-based indexing
            result.push_back(solution);
            return;
        }

        for (int col = 0; col < n; col++) {
            if (isSafe(board, row, col)) {
                board[row] = col;  // Place queen
                solveNQueen(board, row + 1, n); // Recur for next row
                board[row] = -1;   // Backtrack
            }
        }
    }

public:
    vector<vector<int>> nQueen(int n) {
        vector<int> board(n, -1);  // Initialize board with -1 (empty)
        result.clear();
        solveNQueen(board, 0, n);
        return result;
    }
