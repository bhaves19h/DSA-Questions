 
long long mergeAndCount(vector<int>& arr, int left, int mid, int right) {
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;
    long long invCount = 0;

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else {
            temp[k++] = arr[j++];
            invCount += (mid - i + 1);
        }
    }

    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
    for (int x = 0; x < temp.size(); x++) arr[left + x] = temp[x];

    return invCount;
}

long long mergeSortAndCount(vector<int>& arr, int left, int right) {
    if (left >= right) return 0;

    int mid = (left + right) / 2;
    return mergeSortAndCount(arr, left, mid) +
           mergeSortAndCount(arr, mid + 1, right) +
           mergeAndCount(arr, left, mid, right);
}

long long inversionCount(vector<int>& arr) {
    return mergeSortAndCount(arr, 0, arr.size() - 1);
}
};
